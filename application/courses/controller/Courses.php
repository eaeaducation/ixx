<?php/** * Created by PhpStorm. * User: Administrator * Date: 2018/7/2 * Time: 9:54 */namespace app\courses\controller;use controller\BasicAdmin;use think\App;use think\Db;use service\DataService;use app\common\model\Course;use service\LogService;/** * Class Courses * @package app\courses\controller * 课程管理 */class Courses extends BasicAdmin{    public $table = 'saas_courses';    public $table2 = 'saas_courseware';    /**     * @return array|string     * @throws \think\Exception     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     * @author Jasmine2     */    public function index()    {        $this->title = '课程管理';        $db = Db::name($this->table)            ->where('status', '<>', 3)            ->order('id desc');        $get = $this->request->get();        $userid = $this->user['authorize'];        if (!in_array($userid, [1, 3, 4, 22])) {            $department = $this->user['employee']['department'];        }        if (!empty($department)) {            $db->where('branch', '=', $department);        }        (isset($get['title']) && $get['title'] !== '') && $db->where('title', 'like', "%{$get['title']}%");        foreach (['branch', 'subject', 'type', 'category'] as $key) {            (isset($get[$key]) && $get[$key] !== '') && $db->where($key, '=', $get[$key]);        }        $this->assign('userid', $userid);        return parent::_list($db, true);    }    /**     * @return array|string     * @throws \think\Exception     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     * @author Jasmine2     */    public function add()    {        $this->title = '添加课程';        return $this->_form($this->table, 'form');    }    protected function _form_filter(&$vo)    {        if ($this->request->isPost()) {            $post = $this->request->post();            if (isset($post['time_range1'])) {                list($begin_time, $end_time) = explode('~', $post['time_range1']);                $vo['begin_time'] = strtotime($begin_time . "00:00:00");                $vo['end_time'] = strtotime($end_time . "23:59:59");            } else {                $vo['begin_time'] = 0;                $vo['end_time'] = 0;            }            if (isset($vo['id'])) {                LogService::write('课程管理', '修改了课程【' . $vo['no'] . '】信息');            } else {                LogService::write('课程管理', '添加了一门课程');            }        }    }    /**     * @return array|string     * @throws \think\Exception     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     * @author Jasmine2     */    public function edit()    {        $this->title = '编辑课程';        return $this->_form($this->table, 'form');    }    protected function _form_result($data)    {        list($base, $spm, $url) = [url('@admin'), $this->request->get('spm'), url('courses/courses/index')];        $this->success('操作成功！', "{$base}#{$url}?spm={$spm}");    }    /**     * @throws \think\Exception     * @throws \think\exception\PDOException     * @author Jasmine2     */    public function del()    {        if (DataService::update($this->table)) {            LogService::write('课程管理', '删除了一门课程');            $this->success("删除成功!", '');        }        $this->error("删除失败, 请稍候再试!");    }    /**     * @return array|string     * @throws \think\Exception     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     * @author Jasmine2     */    public function viewCourse()    {        $vo = Course::get($this->request->get('id'));        $this->title = '课程详情';        $vo['time_range'] = date('Y-m-d', $vo['begin_time']) . " ~ " . date('Y-m-d', $vo['end_time']);        return $this->view('view', [            'vo' => $vo,            'coursewares' => $vo->test(),            'textbooks' => $vo->textbooks(),            'homework' => $vo->homework()        ]);    }    /**     * @return array|string     * @throws \think\Exception     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     * @author Jasmine2     * 选择列表（教材）     */    public function addTextbook()    {        $db = Db::name('saas_textbook')            ->where('status', '<>', 3)//            ->where('type', '=', $this->request->get('type', 0))            ->order('id desc');        $get = $this->request->get();        (isset($get['title']) && $get['title'] !== '') && $db->where('title', 'like', "%{$get['title']}%");        foreach (['cost_type'] as $key) {            (isset($get[$key]) && $get[$key] !== '') && $db->where($key, '=', $get[$key]);        }        $except = $this->request->get('except', '');        $except == '' || $db->whereNotIn('id', $except);        return parent::_list($db, true, true);    }    /**     * @author Jasmine2     * 实际操作添加     */    public function addTextbookDo()    {        $textbook_ids = $this->request->post('id');        $course_id = $this->request->get('cid');        $textbook_ids = explode(',', $textbook_ids);        $data = [];        foreach ($textbook_ids as $i) {            array_push($data, [                'course_id' => $course_id,                'textbook_id' => $i,                'created_at' => time()            ]);        }        Db::name('saas_course_textbook')->insertAll($data, true);        LogService::write('课程管理', '给课程【id-' . $data[0]['course_id'] . '】增加了' . count($data) . '项杂费');        $this->success('教材杂费添加成功!', '', ['close_fragment' => true]);    }    /**     * @throws \think\Exception     * @throws \think\exception\PDOException     * @author Jasmine2     * 删除教材     */    public function delTextbook()    {        $course_id = $this->request->get('cid');        $textbood_ids = $this->request->post('id', []);        Db::name('saas_course_textbook')            ->where('course_id', '=', $course_id)            ->where('textbook_id', 'in', $textbood_ids)            ->delete();        LogService::write('课程管理', '给课程【id-' . $course_id . '】删除了' . count($textbood_ids) . '项杂费');        $this->success('删除成功!', '');    }    /**     * 添加课件     * @return mixed|void     */    public function addCourseware()    {        $this->title = '添加课件';        $vid = $this->request->get('id');        if ($this->request->isPost()) {            $post = $this->request->post();            $data = [                'title' => $post['title'],                'course_id' => $vid,                'content' => $post['content'],                'url' => $post['url'],                'created_at' => $post['created_at']            ];            if (isset($post['remark'])) {                $data['remark'] = $post['remark'];            }            $res = Db::name('saas_courseware')                ->insert($data);            if ($res) {                LogService::write('课程管理', '给课程【id-' . $data['course_id'] . '】添加了【' . $data['title'] . '】课件');                return $this->success('添加课件成功！', '', ['close_fragment' => true]);            }        } else {            return $this->fetch();        }    }    /**     * 删除课件     */    public function delCourseware()    {        if (DataService::update($this->table2)) {            LogService::write('课程管理', '给课程删除了一项课件');            $this->success("课件删除成功!", '');        }        $this->error("课件删除失败, 请稍候再试!");    }}